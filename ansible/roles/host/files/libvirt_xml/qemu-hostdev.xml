<domain type="kvm" xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
    <name>qemu-hostdev</name>
    <metadata>
        <libosinfo:libosinfo xmlns:libosinfo="http://libosinfo.org/xmlns/libvirt/domain/1.0">
            <libosinfo:os id="http://ubuntu.com/ubuntu/20.04"/>
        </libosinfo:libosinfo>
    </metadata>

    <qemu:commandline>
        <qemu:arg value='-bios'/>
        <qemu:arg value='OVMF.fd'/>
    </qemu:commandline>

    <memory unit="GiB">16</memory>
    <vcpu cpuset="0-17" placement="static">18</vcpu>

    <os>
        <type arch="x86_64" machine="q35">hvm</type>
        <boot dev="hd"/>
    </os>

    <features>
        <acpi/>
        <apic/>

        <!-- needed for the viommu -->
        <ioapic driver='qemu'/>
    </features>
    <cpu check="partial" mode="host-model"/>
    <clock offset="utc">
        <timer name="rtc" tickpolicy="catchup"/>
        <timer name="pit" tickpolicy="delay"/>
        <timer name="hpet" present="no"/>
    </clock>
    <pm>
        <suspend-to-mem enabled="no"/>
        <suspend-to-disk enabled="no"/>
    </pm>

    <devices>
        <emulator>/usr/bin/qemu-system-x86_64</emulator>
        
        <!-- os image disk -->
        <disk device="disk" type="file">
            <driver name="qemu" type="qcow2"/>
            <source file="/nvme-fio/bench_server_config/images/qemu-hostdev.qcow"/>
            <!-- remember to create this disk with qemu-img -->
            <backingStore type="file">
                <format type="qcow2"/>
                <source file="/nvme-fio/bench_server_config/images/focal-server-cloudimg-amd64.img"/>
                <backingStore/>
            </backingStore>
            <target bus="virtio" dev="sda"/>
        </disk>
        
        <!-- ubuntu cloud image sillyness, gives a default password to the image -->
        <disk device="disk" type="file">
            <source file="/nvme-fio/bench_server_config/images/user-data.img"/>
            <target bus="virtio" dev="sdb"/>
        </disk>
        
        <!-- disk under test -->
        <hostdev managed="yes" mode="subsystem" type="pci">
            <source>
                <address bus="0xbc" domain="0x0000" function="0x0" slot="0x00"/>
            </source>
            <driver name="vfio" />
        </hostdev>
        
        <!-- host/guest folder sharing, the target is a tag that has to be mounted in -->
        <filesystem accessmode="passthrough" type="mount">
            <source dir="/nvme-fio"/>
            <target dir="nvme_fio"/>
        </filesystem>

        <filesystem accessmode="passthrough" type="mount">
            <source dir="/nutanix-src"/>
            <target dir="nutanix_src"/>
        </filesystem>
        
        <!-- internet, needs libvirtd to be restarted while vm is running for iptables to reload -->
        <interface type="network">
            <source network="default"/>
            <model type="virtio"/>
        </interface>

        <!-- we need to enable vfio inside the guest, so we need a virtual iommu https://mcastelino.medium.com/how-to-use-vfio-to-assign-a-device-to-nested-vm-adb943dada4e -->
        <iommu model='intel'>
            <driver intremap='on' caching_mode='on' iotlb="on" />
        </iommu>
        
        <!-- serial console to interact with virsh -->
        <console type="pty"/>
    </devices>
</domain>